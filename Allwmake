#!/bin/bash
cd ${0%/*} || exit 1    # Run from this directory

help_flag=''
tutorial_flag=''
torch_flag=''
muq_flag=''
applications_flag=''
unit_tests_flag=''

while getopts 'htmqj:au' flag; do
  case "${flag}" in
    h) help_flag='true' ;;
    t) tutorial_flag='true' ;;
    m) torch_flag="true" ;;
    q) muq_flag="true" ;;
    a) applications_flag="true" ;;
    u) unit_tests_flag="true" ;;
    j) parallel_flag="-j ${OPTARG}" ;;
    *) print_usage
       exit 1 ;;
  esac
done

if [[ $help_flag == 'true' ]]; then
    echo "Help of the ITHACA-FV ./Allwmake utility"
    echo 
    echo "options:"
    echo "-h,     show brief help"
    echo "-t,     enable disable tutorials compilation, False by default"
    echo "-m,     enable TORCH extension, False by default"
    echo "-q,     enable MUQ2 extension, False by default"
    echo "-j,     enable parallel compilation with specified number of cores"
    echo "-a,     enable application compilation, False by default"
    echo "-u,     enable unitTests compilation, False by default"    
    echo 
    echo "Help for the standard wmake OpenFOAM utility"
    wmake -h
    exit
fi


cd src
for d in ./*/ ; do     
    cd $d
    if [ -f "Make/files" ]; then
        if [[ $d == './ITHACA_TORCH/' ]]; then
            if [[ $torch_flag == 'true' ]]; then 
                echo $d 
                wmake $parallel_flag
            else
                cd ..
                continue 2
            fi
        elif [[ $d == './ITHACA_MUQ/' ]]; then
            if [[ $muq_flag == 'true' ]]; then 
                echo $d 
                wmake $parallel_flag
            else
                cd ..
                continue 2
            fi
        else
            echo $d  
            wmake $parallel_flag
        fi
     if [ $? -ne 0 ]
     then
      echo $d "did not compile"
      exit 1
     fi
    fi
    cd ../
done
cd ..

cd applications
if [[ $applications_flag == 'true' ]]; then
for d in ./*/ ; do   
    echo $d    
    cd $d
    if [ -f "Make/files" ]; then
    wmake $parallel_flag 
    if [ $? -ne 0 ]
    then
     echo $d "did not compile"
     exit 1
    fi
	fi
    cd ../
done
fi
cd ..


cd tutorials
if [[ $tutorial_flag == 'true' ]]; then
cd CFD
for d in ./*/ ; do   
    echo $d    
    cd $d
    if [ -f "Make/files" ]; then
    wmake $parallel_flag 
     if [ $? -ne 0 ]
     then
      echo $d "did not compile"
      exit 1
     fi
    fi
    cd ../
done
cd ../
cd inverseHeatTransfer 
for d in ./*/ ; do   
    echo $d    
    cd $d
    if [ -f "Make/files" ]; then
    wmake $parallel_flag 
     if [ $? -ne 0 ]
     then
      echo $d "did not compile"
      exit 1
     fi
    fi
    cd ../
done
cd ../
if [[ $muq_flag == 'true' ]]; then
cd UQ  
for d in ./*/ ; do   
    echo $d    
    cd $d
    if [ -f "Make/files" ]; then
    wmake $parallel_flag 
     if [ $? -ne 0 ]
     then
      echo $d "did not compile"
      exit 1
     fi
    fi
    cd ../
done
cd ../
fi
if [[ $torch_flag == 'true' ]]; then
cd NN  
for d in ./*/ ; do   
    echo $d    
    cd $d
    if [ -f "Make/files" ]; then
    wmake $parallel_flag 
     if [ $? -ne 0 ]
     then
      echo $d "did not compile"
      exit 1
     fi
    fi
    cd ../
done
cd ../
fi
fi
cd ..

cd unitTests
if [[ $unit_tests_flag == 'true' ]]; then
for d in ./*/ ; do   
    echo $d    
    cd $d
    if [ -f "Make/files" ]; then
        if [[ $d == './libTorch/' ]]; then
            if [[ $torch_flag == 'true' ]]; then 
                echo $d 
                wmake $parallel_flag
            else
                cd ..
                continue 2
            fi
        else
            echo $d  
            wmake $parallel_flag
        fi
    if [ $? -ne 0 ]
    then
     echo $d "did not compile"
     exit 1
    fi
    fi
    cd ../
done
fi
cd ..



#------------------------------------------------------------------------------
